{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AACb,mCAAmC;AACnC,wCAAwC;AACxC,gEAAgE;AAChE,wEAAwE;AAExE,+BAA+B;AAE/B,yBAAyB;AACzB,uCAA0C;AAE1C,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAE1C,MAAM,MAAM;IAGR;QACI,8BAA8B;QAC9B,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;QACrB,IAAI,CAAC,GAAG,EAAE,CAAC;QACX,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;QACvD,yBAAyB;QACzB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAEhC,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;YACtC,IAAI,GAAG,CAAC,IAAI,KAAK,mBAAmB,EAAE;gBAClC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,+BAA+B,EAAC,CAAC,CAAC;aACpE;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IAClD,CAAC;IAEM,GAAG;QACN,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QAC7D,MAAM,WAAW,GAAG;YAChB,GAAG,EAAE,UAAU;YACf,IAAI,EAAE,WAAW;YACjB,UAAU,EAAE,UAAU;SACzB,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QACvD,yBAAe,CAAC,MAAM,CAAC,CAAC;QACxB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IACxG,CAAC;IAEO,MAAM;QACV,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QAChC,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,cAAc,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC;QACjE,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,kBAAkB,CAAC,kBAAkB,EAAE,CAAC,MAAM,CAAC,CAAC;QAC7E,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC5B,CAAC;CACJ;AAED,IAAI,MAAM,EAAE,CAAC","sourcesContent":["\"use strict\";\nimport * as express from 'express';\nimport * as config from './config.json';\nimport * as userController from './controllers/user.controller';\nimport * as providerController from './controllers/provider.controller';\nimport * as http from 'http';\nimport * as https from 'https';\nimport {ProviderController} from \"./controllers/provider.controller\";\nimport * as fs from \"fs\";\nimport {startConnection} from \"./sensors\";\n\nconst bodyParser = require('body-parser');\n\nclass Server {\n    public app: express.Application;\n\n    constructor() {\n        //create expressjs application\n        this.app = express();\n        this.run();\n        this.app.use(bodyParser.urlencoded({extended: false}));\n        // parse application/json\n        this.app.use(bodyParser.json());\n\n        this.routes();\n\n        this.app.use(function (err, req, res, next) {\n            if (err.name === 'UnauthorizedError') {\n                res.status(401).send({message: 'Invalid token or not provided'});\n            }\n        });\n\n        this.app.get('/', (req, res) => res.send(''));\n    }\n\n    public run(): void {\n        const privateKey = fs.readFileSync('keys/key.pem', 'utf8');\n        const certificate = fs.readFileSync('keys/cert.pem', 'utf8');\n        const credentials = {\n            key: privateKey,\n            cert: certificate,\n            passphrase: 'socketio'\n        };\n        const server = new https.Server(credentials, this.app);\n        startConnection(server);\n        server.listen(Number(config.listenPort), config.listenAddress, -1, () => console.log('Escuchando'));\n    }\n\n    private routes() {\n        const router = express.Router();\n        const apiRouter = express.Router();\n        router.use('/users', new userController.UserController().routes);\n        router.use('/providers', new providerController.ProviderController().routes);\n        apiRouter.use('/api', router);\n        this.app.use(apiRouter);\n    }\n}\n\nnew Server();\n"]}