{"version":3,"file":"orders.controller.js","sourceRoot":"","sources":["orders.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport * as database from '../database';\nimport * as config from \"../config.json\";\nimport * as expressJwt from 'express-jwt'\nimport {fromHeaderOrQuerystring} from \"../jwt-utilty\";\n\nmodule Route {\n    export class OrdersController {\n        get routes(): express.Router {\n            const router = express.Router();\n            router.get('', expressJwt({\n                secret: config.jwtSecret,\n                getToken: fromHeaderOrQuerystring\n            }), this.getAllOrders.bind(this.getAllOrders));\n            router.post('', this.createOrder.bind(this.createOrder));\n            return router;\n        }\n\n        createOrder(req: express.Request, res: express.Response) {\n            database.connection.query(`INSERT INTO \\`order\\` (idPersonReceiving, \n            idPaymentMethod, order_status, tracking_number, creation_date, modification_date, invoice)\n             VALUES (NULL, NULL, '', '', NOW(), NOW(), NULL)`, (err, results) => {\n                if (err) {\n                    console.error(err);\n                    res.status(400).send({});\n                    return;\n                }\n                let counter = 0;\n                for (let i = 0; i < req.body.products.length; i++) {\n                    const product = req.body.products[i];\n                    database.connection.query(`INSERT INTO contains_product (idOrder, idProduct, quantity) \n                    VALUES(?, ?, ?)`, [results.insertId, product.idProduct, product.quantity], (err1, results1) => {\n                       if (err1) {\n                           console.error(err1);\n                           return;\n                       }\n                       counter++;\n                       if (counter === req.body.products.length) {\n                           res.send(200).send({});\n                       }\n                    });\n                }\n            });\n        }\n\n        getAllOrders(req: express.Request, res: express.Response) {\n            database.connection.query(\"SELECT tecneu.order.*, person_receiving.name as 'personR',\" +\n                \" payment_method.name AS 'payment' FROM tecneu.order, tecneu.person_receiving, \" +\n                \"tecneu.payment_method WHERE tecneu.person_receiving.idPersonReceiving = tecneu.order.idPersonReceiving\" +\n                \" AND tecneu.payment_method.idPaymentMethod = tecneu.order.idPaymentMethod\", (err, result) => {\n                if (err) {\n                    res.status(400);\n                    res.send({});\n                    return;\n                }\n                res.status(200);\n                res.send(result);\n            });\n        }\n\n        modifyOrder(req: express.Request, res: express.Response) {\n\n        }\n\n        deleteOrder(req: express.Request, res: express.Response) {\n            database.connection.query('DELETE * FROM orders where orderId = ?', [req.params.id], (err, result) => {\n\n            });\n        }\n    }\n\n}\n\nexport = Route;\n"]}