{"version":3,"file":"user.controller.js","sourceRoot":"","sources":["user.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport * as database from '../database';\nimport {compare, genSalt, hash} from 'bcryptjs';\nimport * as jwt from 'jsonwebtoken';\nimport * as config from '../config.json';\nimport * as expressJwt from 'express-jwt'\nimport {fromHeaderOrQuerystring} from \"../jwt-utilty\";\nimport {io} from \"../sensors\";\n\nmodule Route {\n    export class UserController {\n        get routes(): express.Router {\n            const router = express.Router();\n\n            router.get('/me', expressJwt({\n                secret: config.jwtSecret,\n                getToken: fromHeaderOrQuerystring\n            }), this.getCurrentUser.bind(this.getCurrentUser));\n\n            router.get('/:id', this.getUserWithId.bind(this.getUserWithId));\n            router.get('', expressJwt({\n                secret: config.jwtSecret,\n                getToken: fromHeaderOrQuerystring\n            }), this.getAllUsers.bind(this.getAllUsers));\n            router.post('/', this.createNewUser.bind(this.createNewUser));\n            // delete user\n            router.delete('/:userId', this.deleteUser.bind(this.deleteUser));\n            // modificar usuario\n            router.put('/:userId', this.modifyUser.bind(this.modifyUser));\n\n            // login\n            router.post('/login', this.login.bind(this.login));\n\n            return router;\n        }\n\n        private getCurrentUser(req: express.Request | any, res: express.Response) {\n            database.connection.query('select idUser            as id,\\n' +\n                '       name              as userType,\\n' +\n                '       username,\\n' +\n                '       names,\\n' +\n                '       surnames,\\n' +\n                '       rfid,\\n' +\n                '       birthdate,\\n' +\n                '       creation_date     as creationDate,\\n' +\n                '       modification_date as modificationDate,\\n' +\n                '       u.name as userType\\n' +\n                'from user\\n' +\n                '       inner join user_type u on user.idUserType = u.idUserType where idUser = ?', [req.user.id], (err, result) => {\n                if (err || result.length !== 1) {\n                    res.status(404);\n                    res.send({});\n                    return;\n                }\n                res.status(200);\n                res.send(result[0]);\n            })\n        }\n\n        private getAllUsers(req: express.Request | any, res: express.Response) {\n            database.connection.query('select idUser            as id,\\n' +\n                '       name              as userType,\\n' +\n                '       username,\\n' +\n                '       names,\\n' +\n                '       surnames,\\n' +\n                '       rfid,\\n' +\n                '       birthdate,\\n' +\n                '       creation_date     as creationDate,\\n' +\n                '       modification_date as modificationDate,\\n' +\n                '       u.name as userType\\n' +\n                'from user\\n' +\n                '       inner join user_type u on user.idUserType = u.idUserType', (err, result: Array<any>) => {\n\n                res.status(200).send(result);\n            });\n        }\n\n        private getUserWithId(req: express.Request, res: express.Response) {\n            database.connection.query('SELECT * from user where idUser = ?', [req.params.id], (err, result: Array<any>) => {\n                if (err || result.length !== 1) {\n                    res.status(404);\n                    res.send({});\n                    return;\n                }\n                res.status(200);\n                res.send(result[0]);\n            });\n\n        }\n\n        /**\n         * Crea un nuevo usuario\n         * @param req petición del servidor al cliente\n         * @param res respuesta del servidor al cliente\n         */\n        private createNewUser(req: express.Request, res: express.Response) {\n            const body = req.body;\n            if (!body.password || !body.username || !body.userType) {\n                res.status(400);\n                res.send({});\n                return;\n            }\n\n            // buscamos el user type\n            database.connection.query(`SELECT * from user_type WHERE name = ?`, [body.userType], (err, result: Array<any>) => {\n                if (err || result.length !== 1) {\n                    res.status(400);\n                    res.send({});\n                    return;\n                }\n\n                genSalt(10, (err, salt) => {\n                    // Encripta la contraseña\n                    hash(body.password, salt, (err, encryptedPassword) => {\n                        database.connection.query(`INSERT INTO user\n                        (idUserType, Username, Password, surnames, rfid, birthdate, creation_date, modification_date, names) \n                        VALUES (?, ?, ?, ?, ?, ?, NOW(), NOW(), ?)`, [\n                            result[0].idUserType,\n                            body.username,\n                            encryptedPassword,\n                            body.surnames !== undefined ? body.surnames : '',\n                            body.rfid,\n                            body.birthdate,\n                            body.names !== undefined ? body.names : ''], (err, result) => {\n                            if (err) {\n                                res.status(400);\n                                res.send({});\n                                return;\n                            }\n                            res.status(200);\n                            res.send({});\n                            io.emit('registerFingerprint', {userId: result.insertId});\n                            for (let i = 0; i < body.schedules.length; ++i) {\n                                const daySchedule = body.schedules[i];\n                                database.connection.query(`INSERT INTO acces_shedule (idUser, idWeekday, idDoor, start_time, end_time) VALUES(?, ?, ?, ?, ?)`, [\n                                    result.insertId, daySchedule.day, daySchedule.door, daySchedule.start, daySchedule.end\n                                ], (e, r) => {\n                                   if (e) {\n                                       console.log(e);\n                                   }\n                                });\n                            }\n                            return;\n                        });\n                    });\n                });\n            });\n\n        }\n\n        private login(req: express.Request, res: express.Response) {\n            database.connection.query('SELECT idUser, username, password, user_type.name as type ' +\n                'from user, user_type where username = ? and user.idUserType = user_type.idUserType',\n                [req.body.username],\n                (err, result) => {\n                    if (err || result.length !== 1) {\n                        res.status(404);\n                        res.send({});\n                        return;\n                    }\n                    compare(req.body.password, result[0].password).then(matches => {\n                        if (!matches) {\n                            res.status(404);\n                            res.send({});\n                            return;\n                        }\n                        const token = jwt.sign({\n                                username: req.body.username,\n                                id: result[0].idUser,\n                                type: result[0].type\n                            },\n                            config.jwtSecret,\n                            {expiresIn: \"1y\"});\n                        res.status(200);\n                        res.send({token: token, userType: result[0].type});\n                    });\n                    console.log(result[0]);\n                })\n        }\n\n        private deleteUser(req: express.Request, res: express.Response) {\n            database.connection.query('DELETE from user where idUser = ?', [req.params.userId], (err, result) => {\n                res.status(err ? 400 : 200);\n                res.send({});\n            })\n        }\n\n        private modifyUser(req: express.Request, res: express.Response) {\n            database.connection.query('SELECT * from user where idUser = ?', [req.params.userId], (err, result) => {\n                if (err) {\n                    res.status(400);\n                    res.send({});\n                    return;\n                }\n                const body = req.body;\n                const currentInfo = result[0];\n                const username = body.username ? body.username : currentInfo.username;\n                const names = body.names ? body.names : currentInfo.names;\n                const surnames = body.surnames ? body.surnames : currentInfo.surnames;\n                const birthdate = body.birthdate ? body.birthdate : currentInfo.birthdate;\n                if (body.password) {\n                    genSalt(10, (err, salt) => {\n                        // Encripta la contraseña\n                        hash(body.password, salt, (err, encryptedPassword) => {\n                            const password = encryptedPassword;\n                            database.connection.query('UPDATE user SET password = ? WHERE idUser = ?', [encryptedPassword, req.params.userId], (err, dbRes) => {\n                            })\n                        });\n                    });\n                }\n                if (body.userType) {\n                    database.connection.query(`SELECT * from user_type WHERE name = ?`, [body.userType], (err, result: Array<any>) => {\n                        database.connection.query('UPDATE user SET idUserType = ? WHERE idUser = ?', [result[0].idUserType, Number(req.params.userId)], (e, r) => {\n                            console.log(e);\n                        });\n                    });\n                }\n\n                database.connection.query('UPDATE user SET ' +\n                    'username = ?, ' +\n                    'names = ?, ' +\n                    'surnames = ?, ' +\n                    'birthdate = ? ' +\n                    'WHERE idUser = ?', [username, names, surnames, birthdate, req.params.userId], (err, r) => {\n                    res.status(200);\n                    res.send({});\n                });\n\n            })\n        }\n    }\n\n}\n\nexport = Route;\n"]}