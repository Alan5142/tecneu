{"version":3,"file":"provider.controller.js","sourceRoot":"","sources":["provider.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\r\nimport * as database from '../database';\r\nimport * as config from \"../config.json\";\r\nimport * as expressJwt from 'express-jwt'\r\nimport {fromHeaderOrQuerystring} from \"../jwt-utilty\";\r\nimport {genSalt, hash} from \"bcryptjs\";\r\n\r\nmodule Route {\r\n    export class ProviderController {\r\n        constructor() {\r\n        }\r\n\r\n        get routes(): express.Router {\r\n            const router = express.Router();\r\n            router.get('/:id', this.getProviderWithId.bind(this.getProviderWithId));\r\n            router.get('', expressJwt({\r\n                secret: config.jwtSecret,\r\n                getToken: fromHeaderOrQuerystring\r\n            }), this.getAllProviders.bind(this.getAllProviders));\r\n            router.post('/', this.createNewProvider.bind(this.createNewProvider));\r\n            router.delete('/:idProvider', this.removeProvider.bind(this.removeProvider));\r\n            router.put('/:idProvider', this.modifyProvider.bind(this.modifyProvider));\r\n            return router;\r\n        }\r\n\r\n        private getAllProviders(req: express.Request | any, res: express.Response) {\r\n            database.connection.query('select idProvider as id, company_name as companyName, creation_date as creationDate, person_name as personName, email, phone_number as phoneNumber\\n' +\r\n                'from provider', (err, result: Array<any>) => {\r\n\r\n                res.status(200).send(result);\r\n            });\r\n        }\r\n\r\n        private getProviderWithId(req: express.Request, res: express.Response) {\r\n            database.connection.query('SELECT idProvider as id, company_name as companyName, creation_date as creationDate, person_name as personName, email, phone_number as phoneNumber\\n' +\r\n                'from provider where idProvider = ?', [req.params.id], (err, result: Array<any>) => {\r\n                if (err || result.length !== 1) {\r\n                    res.status(404);\r\n                    res.send();\r\n                    return;\r\n                }\r\n                res.status(200);\r\n                res.send(result[0]);\r\n            });\r\n\r\n        }\r\n\r\n        /**\r\n         * Crea un nuevo proveedor\r\n         * @param req peticiÃ³n del servidor al cliente\r\n         * @param res respuesta del servidor al cliente\r\n         */\r\n        private createNewProvider(req: express.Request, res: express.Response) {\r\n            const body = req.body;\r\n            if (!body.company || !body.name || !body.email || !body.phoneNumber) {\r\n                res.status(400);\r\n                res.send();\r\n                return;\r\n            }\r\n            database.connection.query(`INSERT INTO provider\r\n            (company_name, creation_date, person_name, email, phone_number) \r\n                        VALUES (?, NOW(), ?, ?, ?)`, [\r\n                            body.company,\r\n                            body.name,\r\n                            body.email,\r\n                            body.phoneNumber], (err, result) => {\r\n                            if (err) {\r\n                                res.status(400);\r\n                                res.send();\r\n                                return;\r\n                            }\r\n                            res.status(200);\r\n                            res.send();\r\n                            return;\r\n                        });\r\n        }\r\n\r\n        private removeProvider(req: express.Request, res: express.Response) {\r\n            database.connection.query('DELETE FROM provider where idProvider = ?', [Number(req.params.idProvider)], (err, result) => {\r\n               res.status(err ? 400 : 200);\r\n               res.send({});\r\n            });\r\n        }\r\n\r\n        private modifyProvider(req: express.Request, res: express.Response) {\r\n            database.connection.query('SELECT * from provider where idProvider = ?', [req.params.idProvider], (err, result) => {\r\n                if (err) {\r\n                    res.status(400);\r\n                    res.send({});\r\n                    return;\r\n                }\r\n                const body = req.body;\r\n                const currentInfo = result[0];\r\n                const company = body.company ? body.company : currentInfo.company_name;\r\n                const name = body.name ? body.name : currentInfo.person_name;\r\n                const email = body.email ? body.email : currentInfo.email;\r\n                const phoneNumber = body.phoneNumber ? body.phoneNumber : currentInfo.phone_number;\r\n\r\n                database.connection.query('UPDATE provider SET ' +\r\n                    'company_name = ?, ' +\r\n                    'person_name = ?, ' +\r\n                    'email = ?, ' +\r\n                    'phone_number = ? ' +\r\n                    'WHERE idProvider = ?', [company, name, email, phoneNumber, req.params.idProvider], (err, r) => {\r\n                    if(err)\r\n                    {\r\n                        res.status(400);\r\n                        res.send();\r\n                        return;\r\n                    }\r\n                    res.status(200);\r\n                    res.send({});\r\n                });\r\n\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport = Route;\r\n"]}