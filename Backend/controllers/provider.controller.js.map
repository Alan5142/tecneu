{"version":3,"file":"provider.controller.js","sourceRoot":"","sources":["provider.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport * as database from '../database';\nimport * as config from \"../config.json\";\nimport * as expressJwt from 'express-jwt'\nimport {fromHeaderOrQuerystring} from \"../jwt-utilty\";\nimport {genSalt, hash} from \"bcryptjs\";\n\nmodule Route {\n    export class ProviderController {\n        get routes(): express.Router {\n            const router = express.Router();\n            router.get('/:providerName/products', this.getProviderProducts.bind(this.getProviderProducts));\n            router.get('/:id', this.getProviderWithId.bind(this.getProviderWithId));\n            router.get('', expressJwt({\n                secret: config.jwtSecret,\n                getToken: fromHeaderOrQuerystring\n            }), this.getAllProviders.bind(this.getAllProviders));\n            router.post('/', this.createNewProvider.bind(this.createNewProvider));\n            router.delete('/:idProvider', this.removeProvider.bind(this.removeProvider));\n            router.put('/:idProvider', this.modifyProvider.bind(this.modifyProvider));\n            return router;\n        }\n\n        private getAllProviders(req: express.Request | any, res: express.Response) {\n            database.connection.query('select idProvider as id, company_name as companyName, creation_date as creationDate, person_name as personName, email, phone_number as phoneNumber\\n' +\n                'from provider', (err, result: Array<any>) => {\n\n                res.status(200).send(result);\n            });\n        }\n\n        private getProviderWithId(req: express.Request, res: express.Response) {\n            database.connection.query('SELECT idProvider as id, company_name as companyName, creation_date as creationDate, person_name as personName, email, phone_number as phoneNumber\\n' +\n                'from provider where idProvider = ?', [req.params.id], (err, result: Array<any>) => {\n                if (err || result.length !== 1) {\n                    res.status(404);\n                    res.send();\n                    return;\n                }\n                res.status(200);\n                res.send(result[0]);\n            });\n\n        }\n\n        /**\n         * Crea un nuevo proveedor\n         * @param req peticiÃ³n del servidor al cliente\n         * @param res respuesta del servidor al cliente\n         */\n        private createNewProvider(req: express.Request, res: express.Response) {\n            const body = req.body;\n            if (!body.company || !body.name || !body.email || !body.phoneNumber) {\n                res.status(400);\n                res.send();\n                return;\n            }\n            database.connection.query(`INSERT INTO provider\n            (company_name, creation_date, person_name, email, phone_number) \n                        VALUES (?, NOW(), ?, ?, ?)`, [\n                            body.company,\n                            body.name,\n                            body.email,\n                            body.phoneNumber], (err, result) => {\n                            if (err) {\n                                res.status(400);\n                                res.send();\n                                return;\n                            }\n                            res.status(200);\n                            res.send({});\n                            return;\n                        });\n        }\n\n        private removeProvider(req: express.Request, res: express.Response) {\n            database.connection.query('DELETE FROM provider where idProvider = ?', [Number(req.params.idProvider)], (err, result) => {\n               res.status(err ? 400 : 200);\n               res.send({});\n            });\n        }\n\n        private modifyProvider(req: express.Request, res: express.Response) {\n            database.connection.query('SELECT * from provider where idProvider = ?', [req.params.idProvider], (err, result) => {\n                if (err) {\n                    res.status(400);\n                    res.send({});\n                    return;\n                }\n                const body = req.body;\n                const currentInfo = result[0];\n                const company = body.companyName ? body.companyName : currentInfo.company_name;\n                const name = body.personName ? body.personName : currentInfo.person_name;\n                const email = body.email ? body.email : currentInfo.email;\n                const phoneNumber = body.phoneNumber ? body.phoneNumber : currentInfo.phone_number;\n\n                database.connection.query('UPDATE `provider` SET ' +\n                    'company_name = ?, ' +\n                    'person_name = ?, ' +\n                    'email = ?, ' +\n                    'phone_number = ? ' +\n                    'WHERE idProvider = ?', [company, name, email, phoneNumber, req.params.idProvider], (err, r) => {\n                    if(err)\n                    {\n                        res.status(400);\n                        res.send();\n                        return;\n                    }\n                    res.status(200);\n                    res.send({});\n                });\n                const selectedProducts = req.body.selectedProducts as Array<any>;\n                let productsToDelete = req.body.productsToDelete as Array<any>;\n                productsToDelete = productsToDelete.filter(value => !selectedProducts.find(value1 => value1.idProduct === value.idProduct));\n                selectedProducts.forEach(value => {\n                    database.connection.query(`insert into have_product (idProvider, idProduct, price)\nvalues (?, ?, ?)`, [req.params.idProvider, value.idProduct, value.price], err1 => {console.error(err1)});\n                });\n\n                productsToDelete.forEach(value => {\n                    database.connection.query(`delete from have_product where idProvider = ? and idProduct = ?`,\n                        [req.params.idProvider, value.idProduct], err1 => {console.error(err1)});\n                });\n            })\n        }\n\n        private getProviderProducts(req: express.Request, res: express.Response) {\n            database.connection.query(`select products.idProduct, products.mercadolibre_id as meliId, products.name, products.stock, hp.price\nfrom products inner join have_product hp on products.idProduct = hp.idProduct\ninner join provider p on hp.idProvider = p.idProvider where p.company_name = ?`, [req.params.providerName], (err, results) => {\n                if (err) {\n                    res.status(400).send({});\n                    return;\n                }\n                res.status(200).send(results);\n            });\n        }\n\n        private setProviderProducts(req: express.Request, res: express.Response) {\n\n        }\n    }\n}\n\nexport = Route;\n"]}